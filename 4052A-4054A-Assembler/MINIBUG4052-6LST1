input file: input file is tape file #5output file: output file is tape file #6PASS 1***EOF***PASS 20000:                         ;       6.0 MINIBUG REV.4 PROGRAM - Modified for Tektronix 4052A/4054A 0000:                         ;   Modified from pdf source by Monty McGraw - Oct 6 20180000:                         ;0000:                         ;     from LISTING in MikbugEN100.pdf at0000:                         ;     http://www.swtpc.com/mholley/MP_A/MIKBUG_Index.htm0000:                         ;       NAM MINIB0000:                         ;       MINI-BUG0000:                         ;       COPYWRITE 1973, MOTOROLA IMC0000:                         ;       REV 004 (USED WITH MIKBUG)0000:                         ;0000:                         ;   location of Motorola ACIA hardware in Tektronix 4052/40540000:  FF44                   ACIACS= 0FF44   ;ACIA CONTROL/STATUS (FF44)0000:  FF45                   ACIADA= 0FF45   ;                                        (FF45)0000:  A002                   BEGA=   0A002   ; BEGINING ADDR PRINT/PUNCH0000:                         ;               NOP0000:  A004                   ENDA=   0A004   ; ENDING ADDR PRINT/PUNCH0000:  A005                   ENDA_1= 0A005   ; aka ENDA+10000:                         ;0000:                         ;   Reworked source for Tektronix 4052A or 4054A to be loaded0000:                         ;   with CALL "EXEC",Code$,Rel$ where first E in EXEC is Control-E0000:                         ;       and Code$ is 8-bit binary and Rel$ contains CHR(20)&CHR(0)0000:                         ;0000:                         ;       The Code assembled by the Tek 4052A assembler is relocatable0000:                         ;   but requires the Tek assembler Code$ and Rel$ together0000:                         ;   for execution with CALL "EXEC"0000:                         ;0000:  7E 00D9R               BEGIN:  JMP     START   ; JUMP TO START CODE0003:                         0003:                         ; INPUT ONE CHAR INTO A-REGISTER0003:  B6 FF44                INCH:   LDAA    ACIACS0006:  47                                     ASRA0007:  24 FA                                  BCC             INCH    ; RECEIVE NOT READY0009:  B6 FF45                                LDAA    ACIADA  ; INPUT CHARACTER000C:  84 7F                                  ANDA    7F,i    ; RESET PARITY BIT000E:  81 7F                                  CMPA    7F,i0010:  27 F1                                  BEQ             INCH    ; RUBOUT - IGNORE0012:  7E 00B1R                               JMP     OUTCH   ; ECHO CHAR0015:                         0015:                         ; INPUT HEX CHAR0015:  8D EC                  INHEX:  BSR     INCH0017:  81 30                                  CMPA    30,i0019:  2B 52                                  BMI             C1              ; NOT HEX001B:  81 39                                  CMPA    39,i001D:  2F 0A                                  BLE             IN1HG001F:  81 41                                  CMPA    41,i0021:  2B 4A                                  BMI             C1              ; NOT HEX0023:  81 46                                  CMPA    46,i0025:  2E 46                                  BGT     C1              ; NOT HEX0027:  80 07                                  SUBA    07,i0029:  39                     IN1HG:  RTS002A:  86 D1                  LOAD:   LDAA    0D1,i   ; TURN READER ON002C:                                         ;STA A  ACIACS  ; DON'T CHANGE THE CS REG002C:  01                                     NOP                             ; REPLACE WITH THREE NOPs002D:  01                                     NOP002E:  01                                     NOP002F:  86 00                                  LDAA    00,i      ; use NULL instead0031:  8D 7E                                  BSR             OUTCH0033:  8D CE                  LOAD3:  BSR     INCH0035:  81 53                                  CMPA    53,i0037:  26 FA                                  BNE     LOAD3   ; 1ST CHAR NOT (S)0039:  8D C8                                  BSR     INCH    ; READ CHAR003B:  81 39                                  CMPA    39,i003D:  27 25                                  BEQ     LOAD21003F:  81 31                                  CMPA    31,i0041:  26 F0                                  BNE             LOAD3   ; 2ND CHAR NOT (1)0043:  7F 01A0R                               CLR             CKSM    ; ZERO CHECKSUM0046:  8D 36                                  BSR             BYTE    ; READ BYTE0048:  80 02                                  SUBA    02,i004A:  B7 01A1R                               STAA    BYTECT  ; BYTE COUNT004D:                         004D:                         ; BUILD ADDRESS004D:  8D 21                                  BSR             BADDR004F:  8D 2D                  LOAD11: BSR             BYTE0051:  7A 01A1R                               DEC             BYTECT0054:  27 05                                  BEQ             LOAD15  ; ZERO BYTE COUNT0056:  A7 00                                  STAA 0,x0058:  08                                     INX0059:  20 F4                                  BRA             LOAD11005B:  7C 01A0R               LOAD15: INC             CKSM005E:  27 D3                                  BEQ             LOAD30060:  86 3F                  LOAD19: LDAA    3F,i    ; PRINT QUESTION MARK0062:  8D 4D                                  BSR             OUTCH0064:  86 B1                  LOAD21: LDAA    0B1,i   ; TURN READER OFF0066:                                    ;STAA        ACIACS  ; DON'T CHANGE THE CS REG0066:  01                                 NOP                         ; REPLACE WITH NOPs0067:  01                                 NOP0068:  01                                 NOP0069:  86 00                              LDAA        00,i    ; use NULL instead006B:  8D 44                              BSR         OUTCH006D:  7E 00DFR               C1:     JMP             CONTRL0070:                         0070:                         ; BUILD ADDRESS0070:  8D 0C                  BADDR:  BSR             BYTE    ; READ 2 FRAMES0072:  B7 01A2R                               STAA    XHI0075:  8D 07                                  BSR             BYTE0077:  B7 01A3R                               STAA    XLOW007A:  FE 01A2R                               LDX             XHI             ; (X) ADDRESS WE BUILT007D:  39                                     RTS007E:                         007E:                         ; INPUT BYTE (TWO FRAMES)007E:  8D 95                  BYTE:   BSR             INHEX   ; GET HEX CHAR0080:  48                                     ASLA0081:  48                                     ASLA0082:  48                                     ASLA0083:  48                                     ASLA0084:  16                                     TAB0085:  8D 8E                                  BSR             INHEX0087:  84 0F                                  ANDA    0F,i    ; MASK TO 4 BITS0089:  1B                                     ABA008A:  16                                     TAB008B:  FB 01A0R                               ADDB    CKSM008E:  F7 01A0R                               STAB    CKSM0091:  39                                     RTS0092:                         0092:                         ;CHANGE MEMORY (M AAAA DD NN)0092:  8D DC                  CHANGE: BSR             BADDR   ; BUILD ADDRESS0094:  8D 34                                  BSR             OUTS    ; PRINT SPACE0096:  8D 30                                  BSR             OUT2HS0098:  8D E4                                  BSR             BYTE009A:  09                                     DEX009B:  A7 00                                  STAA 0,x009D:  A1 00                                  CMPA 0,x009F:  26 BF                                  BNE     LOAD19  ; MEMORY DID NOT CHANGE00A1:  20 3C                                  BRA             CONTRL00A3:  44                     OUTHL:  LSRA                    ; OUT HEX LEFT BCD DIGIT00A4:  44                                     LSRA00A5:  44                                     LSRA00A6:  44                                     LSRA00A7:  84 0F                  OUTHR:  ANDA    0F,i    ; OUT HEX RIGHT BCD DIGIT00A9:  8B 30                                  ADDA    30,i00AB:  81 39                                  CMPA    39,i00AD:  23 02                                  BLS             OUTCH00AF:  8B 07                                  ADDA    07,i00B1:                                         00B1:                         ; OUTPUT ONE CHAR00B1:  37                     OUTCH:  PSHB                    ; SAVE B-REG00B2:  F6 FF44                OUTC1:  LDAB    ACIACS00B5:  57                                     ASRB00B6:  57                                     ASRB00B7:  24 F9                                  BCC             OUTC1   ; XMIT NOT READY00B9:  B7 FF45                                STAA    ACIADA  ; OUTPUT CHARACTER00BC:  33                                     PULB                    ; RESTORE B-REG00BD:  39                                     RTS00BE:                         00BE:  A6 00                  OUT2H:  LDAA 0,x        ; OUTPUT 2 HEX CHAR00C0:  8D E1                                  BSR             OUTHL   ; OUT LEFT HEX CHAR00C2:  A6 00                                  LDAA 0,x00C4:  8D E1                                  BSR             OUTHR   ; OUT RIGHT HEX CHAR00C6:  08                                     INX00C7:  39                                     RTS00C8:  8D F4                  OUT2HS: BSR             OUT2H   ; OUTPUT 2 HEX CHAR + SPACE00CA:  86 20                  OUTS:   LDAA    20,i    ; SPACE00CC:  20 E3                                  BRA             OUTCH   ; (BSR & RTS)00CE:                         00CE:                         ; PRINT CONTENTS OF STACK.00CE:  30                     PRINT:  TSX00CF:  FF 019ER                               STX             SP              ; SAVE STACK POINTER00D2:  C6 09                                  LDAB    09,i00D4:  8D F2                  PRINT2: BSR             OUT2HS  ; OUT 2 HEX & SPACE00D6:  5A                                     DECB00D7:  26 FB                                  BNE PRINT200D9:                         00D9:                         ; ENTER POWER ON SEQUENCE00D9:                         ; INZ ACIA00D9:  B6 00B1                START:  LDAA    0B1         ; DON'T CHANGE UART PARAMETERS00DC:                         ;               STAA    ACIACS  ; REPLACE WITH THREE NOPs00DC:  01                                     NOP                             ; REPLACE WITH THREE NOPs00DD:  01                                     NOP00DE:  01                                     NOP00DF:  BE 0196R               CONTRL: LDS             STACK   ; SET STACK POINTER00E2:  86 0D                                  LDAA    0D,i    ; CARRIAGE RETURN00E4:  8D CB                                  BSR             OUTCH00E6:  86 3E                                  LDAA    3E,i    ; ADD > FOR PROMPT insead of LF00E8:  8D C7                                  BSR             OUTCH00EA:  BD 0003R                               JSR             INCH    ; READ CHARACTER00ED:  16                                     TAB00EE:  8D DA                                  BSR             OUTS    ; PRINT SPACE00F0:  C1 4C                                  CMPB    4C,i00F2:  27 1F                                  BEQ             PUNCH   ; "L"=LIST HEX from A002 > A00400F4:  7E 002AR                               JMP             LOAD00F7:  C1 4D                                  CMPB    4D,i00F9:  27 97                                  BEQ             CHANGE  ; "C"=Change memory00FB:  C1 50                                  CMPB    50,i00FD:  27 CF                                  BEQ             PRINT   ; "P"=Print STACK00FF:  C1 51                                  CMPB    51,i    0101:  27 05                                  BEQ             RETURN  ; "Q"= Quit and return to basic0103:  C1 47                                  CMPB    47,i0105:  26 D8                                  BNE             CONTRL0107:  3B                                     RTI                     ; GO0108:  39                     RETURN: RTS0109:                         ;0109:                         ;  added routine PUNCH from MIKBUG: CHANGD TO DUMP0109:                         ;0109:                         ; PRINT DATA POINTED AT BY X-REG0109:  8D A6                  PDATA2: BSR OUTCH010B:  08                                     INX010C:  A6 00                  PDATA1: LDAA 0,x010E:  81 04                                  CMPA 4,i0110:  26 F7                                  BNE PDATA20112:  39                                     RTS                     ; STOP ON EOT0113:                         ;0113:                         ; PUNCH DUMP (modified for Dump from BEGA thru ENDA0113:                         ; PUNCH FROM BEGA THRU ENDING ADDRESS (ENDA)0113:                         ;0113:  86 00                  PUNCH:  LDAA 00,i               ; just send a NULL0115:  BD 00B1R                               JSR OUTCH               ; OUT CHAR0118:  FE A002                                LDX BEGA011B:  FF 01A5R                               STX TW                  ; TEMP BEGINING ADDRESS011E:  B6 A005                PUN11:  LDAA ENDA_1             ;0121:  B0 01A6R                               SUBA TW_10124:  F6 A004                                LDAB ENDA0127:  F2 01A5R                               SBCB TW012A:  26 04                                  BNE PUN22012C:  81 10                                  CMPA 10,i012E:  25 02                                  BCS PUN230130:  86 15                  PUN22:  LDAA 15,i0132:  8B 04                  PUN23:  ADDA 4,i0134:  B7 01A7R                               STAA MCONT              ; FRAME COUNT THIS RECORD0137:  80 03                                  SUBA 3,i0139:  B7 01A4R                               STAA TEMP               ; BYTE COUNT THIS RECORD013C:                         ; PUNCH C/R,L/F,NULL,S,1  - we don't need this013C:                         ;               LDX #MTAPE1013C:                         ;               JSR PDATA1013C:                         ;               CLR B ZERO CHECKSUM013C:                         ; PUNCH FRAME COUNT       - we don't need this either013C:                         ;               LDX MCONT013C:                         ;               BSR PUNT2               ; output 2 HEX CHAR013C:                         ; PUNCH ADDRESS DON'T NEED013C:  FE 01A5R                               LDX TW013F:  8D 22                                  BSR PUNT20141:  8D 20                                  BSR PUNT20143:                         ; PUNCH DATA0143:  FE 01A5R                               LDX TW0146:  8D 1B                  PUN32:  BSR PUNT2               ;PUNCH ONE BYTE (2 FRAMES)0148:  7A 01A4R                               DEC TEMP                ; DEC BYTE COUNT014B:  26 F9                                  BNE PUN32014D:  FF 01A5R                               STX TW0150:  53                                     COMB0151:  37                                     PSHB0152:  30                                     TSX0153:  BD 00BER                               JSR OUT2H               ; OUTPUT 2 Hex Characters and RTS0156:  33                                     PULB                    ; RESTORE STACK0157:  FE 01A5R                               LDX TW015A:  09                                     DEX015B:  BC A004                                CPX ENDA015E:  26 BE                                  BNE PUN110160:  7E 00DFR                               JMP CONTRL                      ; JMP TO CONTRL0163:                         ;0163:                         ; PUNCH 2 HEX CHAR UPDATE CHECKSUM0163:  EB 00                  PUNT2:  ADDB 0,X-HIGH   ; UPDATE CHECKSUM0165:  7E 00BER                               JMP OUT2H               ; OUTPUT TWO HEX CHAR AND RTS0168:                         ;0168:                         ; RESERVE 46 (DECIMAL) BYTES BEFORE STACK FOR MIKBUG0168:  01                                     NOP0169:  01                                     NOP016A:  01                                     NOP016B:  01                                     NOP016C:  01                                     NOP016D:  01                                     NOP016E:  01                                     NOP016F:  01                                     NOP0170:  01                                     NOP0171:  01                                     NOP0172:  01                                     NOP0173:  01                                     NOP0174:  01                                     NOP0175:  01                                     NOP0176:  01                                     NOP0177:  01                                     NOP0178:  01                                     NOP0179:  01                                     NOP017A:  01                                     NOP017B:  01                                     NOP017C:  01                                     NOP017D:  01                                     NOP017E:  01                                     NOP017F:  01                                     NOP0180:  01                                     NOP0181:  01                                     NOP0182:  01                                     NOP0183:  01                                     NOP0184:  01                                     NOP0185:  01                                     NOP0186:  01                                     NOP0187:  01                                     NOP0188:  01                                     NOP0189:  01                                     NOP018A:  01                                     NOP018B:  01                                     NOP018C:  01                                     NOP018D:  01                                     NOP018E:  01                                     NOP018F:  01                                     NOP0190:  01                                     NOP0191:  01                                     NOP0192:  01                                     NOP0193:  01                                     NOP0194:  01                                     NOP0195:  01                                     NOP0196:  01                     STACK:  NOP ; STACK POINTER0197:                         ; REGISTERS FOR GO0197:  01                                     NOP     ; CONDITION CODES0198:  01                                     NOP     ; B ACCUMULATOR0199:  01                                     NOP     ; A019A:  01                                     NOP     ; X-HIGH019B:  01                                     NOP     ; X-LOW019C:  01                                     NOP     ; P-HIGH019D:  01                                     NOP     ; P-LOW019E:  01                     SP:             NOP ; S-HIGH019F:  01                                     NOP     ; S-LOW01A0:                         ; END REGISTERS FOR GO01A0:  01                     CKSM:   NOP     ; CHECKSUM01A1:  01                     BYTECT: NOP ; BYTE COUNT01A2:  01                     XHI:    NOP     ; X-HIGH01A3:  01                     XLOW:   NOP     ; X-LOW;01A4:                         ;01A4:                         ; MIKBUG added variables for dumping memory to serial01A4:                         ;01A4:  01                     TEMP:   NOP     ; CHAR COUNT (INADD)01A5:  01                     TW:             NOP     ; TEMP/01A6:  01                     TW_1:   NOP ; aka TW+101A7:  01                     MCONT:  NOP     ; TEMP01A8:  01                     XTEMP:  NOP     ; X-REG TEMP STORAGE***EOF***symbols---ACIACS=  FF44	ACIADA=  FF45	BEGA=  A002	ENDA=  A004	ENDA_1=  A005	BEGIN:  0000	INCH:  0003	INHEX:  0015	IN1HG:  0029	LOAD:  002A	LOAD3:  0033	LOAD11:  004F	LOAD15:  005B	LOAD19:  0060	LOAD21:  0064	C1:  006D	BADDR:  0070	BYTE:  007E	CHANGE:  0092	OUTHL:  00A3	OUTHR:  00A7	OUTCH:  00B1	OUTC1:  00B2	OUT2H:  00BE	OUT2HS:  00C8	OUTS:  00CA	PRINT:  00CE	PRINT2:  00D4	START:  00D9	CONTRL:  00DF	RETURN:  0108	PDATA2:  0109	PDATA1:  010C	PUNCH:  0113	PUN11:  011E	PUN22:  0130	PUN23:  0132	PUN32:  0146	PUNT2:  0163	STACK:  0196	SP:  019E	CKSM:  01A0	BYTECT:  01A1	XHI:  01A2	XLOW:  01A3	TEMP:  01A4	TW:  01A5	TW_1:  01A6	MCONT:  01A7	XTEMP:  01A8	error count: 0writing code to tape file #6LEN(REL)$= 62     LEN(CODE$)= 425REL$ IN HEX FOLLOWS000000000100400400500500600700700700800800D000E000E00F0101020203030304040405050606CODE$ IN HEX FOLLOWS                LEN(REL)$= 62     LEN(CODE$)= 425REL$ IN HEX FOLLOWS00 00 00 01 00 13 00 44 00 4B 00 52 00 5C 00 6E 00 73 00 78 00 7B 00 8C 00 8F 00 D0 00 E0 00 EB 00 F5 01 16 01 1C 01 22 01 28 01 35 01 3A 01 3D 01 44 01 49 01 4E 01 54 01 58 01 61 01 66 CODE$ IN HEX FOLLOWS                7E 00 D9 B6 FF 44 47 24 FA B6 FF 45 84 7F 81 7F 27 F1 7E 00 B1 8D EC 81 30 2B 52 81 39 2F 0A 81 41 2B 4A 81 46 2E 46 80 07 39 86 D1 01 01 01 86 00 8D 7E 8D CE 81 53 26 FA 8D C8 81 39 27 25 81 31 26 F0 7F 01 A0 8D 36 80 02 B7 01 A1 8D 21 8D 2D 7A 01 A1 27 05 A7 00 08 20 F4 7C 01 A0 27 D3 86 3F 8D 4D 86 B1 01 01 01 86 00 8D 44 7E 00 DF 8D 0C B7 01 A2 8D 07 B7 01 A3 FE 01 A2 39 8D 95 48 48 48 48 16 8D 8E 84 0F 1B 16 FB 01 A0 F7 01 A0 39 8D DC 8D 34 8D 30 8D E4 09 A7 00 A1 00 26 BF 20 3C 44 44 44 44 84 0F 8B 30 81 39 23 02 8B 07 37 F6 FF 44 57 57 24 F9 B7 FF 45 33 39 A6 00 8D E1 A6 00 8D E1 08 39 8D F4 86 20 20 E3 30 FF 01 9E C6 09 8D F2 5A 26 FB B6 00 B1 01 01 01 BE 01 96 86 0D 8D CB 86 3E 8D C7 BD 00 03 16 8D DA C1 4C 27 1F 7E 00 2A C1 4D 27 97 C1 50 27 CF C1 51 27 05 C1 47 26 D8 3B 39 8D A6 08 A6 00 81 04 26 F7 39 86 00 BD 00 B1 FE A0 02 FF 01 A5 B6 A0 05 B0 01 A6 F6 A0 04 F2 01 A5 26 04 81 10 25 02 86 15 8B 04 B7 01 A7 80 03 B7 01 A4 FE 01 A5 8D 22 8D 20 FE 01 A5 8D 1B 7A 01 A4 26 F9 FF 01 A5 53 37 30 BD 00 BE 33 FE 01 A5 09 BC A0 04 26 BE 7E 00 DF EB 00 7E 00 BE 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 